#!/usr/bin/env python
# -*- coding: utf-8 -*-
# @Author initiald0824
# @Time 2019/8/13 12:21

# 输入两个整数m和n，计算需要改变m的二进制表示中的多少位才能得到n。
# 比如10的二进制表示为1010,13的二进制表示为1101，需要改变1010中的3位才能得到1101。
# 我们可以分两步解决这个问题：第一步求这两个数的异或，第二步统计异或结果中1的位数。
# 把一个整数减去1之后再和原来的整数做位与运算，得到的结果相当于是把整数的二进制表示中的最右边一个1变成0。
# 很多二进制的问题都可以用这个思路解决


def number_of_1(num):
    cnt = 0
    while num:
        cnt += 1
        num = num & (num-1)
    return cnt

